package com.wuyou.worker.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Mid = new Property(0, long.class, "mid", true, "_id");
        public final static Property Worker_name = new Property(1, String.class, "worker_name", false, "USERNAME");
        public final static Property Mobile = new Property(2, String.class, "mobile", false, "PHONE");
        public final static Property Worker_id = new Property(3, String.class, "worker_id", false, "UID");
        public final static Property Avatar = new Property(4, String.class, "avatar", false, "HEAD");
        public final static Property Token = new Property(5, String.class, "token", false, "TOKEN");
        public final static Property Password = new Property(6, String.class, "password", false, "PWD");
        public final static Property Rc_id = new Property(7, String.class, "rc_id", false, "RC_ID");
        public final static Property Rc_token = new Property(8, String.class, "rc_token", false, "RC_TOKEN");
        public final static Property Amount = new Property(9, String.class, "amount", false, "AMOUNT");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: mid
                "\"USERNAME\" TEXT," + // 1: worker_name
                "\"PHONE\" TEXT," + // 2: mobile
                "\"UID\" TEXT," + // 3: worker_id
                "\"HEAD\" TEXT," + // 4: avatar
                "\"TOKEN\" TEXT," + // 5: token
                "\"PWD\" TEXT," + // 6: password
                "\"RC_ID\" TEXT," + // 7: rc_id
                "\"RC_TOKEN\" TEXT," + // 8: rc_token
                "\"AMOUNT\" TEXT);"); // 9: amount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMid());
 
        String worker_name = entity.getWorker_name();
        if (worker_name != null) {
            stmt.bindString(2, worker_name);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(3, mobile);
        }
 
        String worker_id = entity.getWorker_id();
        if (worker_id != null) {
            stmt.bindString(4, worker_id);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(6, token);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(7, password);
        }
 
        String rc_id = entity.getRc_id();
        if (rc_id != null) {
            stmt.bindString(8, rc_id);
        }
 
        String rc_token = entity.getRc_token();
        if (rc_token != null) {
            stmt.bindString(9, rc_token);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(10, amount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMid());
 
        String worker_name = entity.getWorker_name();
        if (worker_name != null) {
            stmt.bindString(2, worker_name);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(3, mobile);
        }
 
        String worker_id = entity.getWorker_id();
        if (worker_id != null) {
            stmt.bindString(4, worker_id);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(6, token);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(7, password);
        }
 
        String rc_id = entity.getRc_id();
        if (rc_id != null) {
            stmt.bindString(8, rc_id);
        }
 
        String rc_token = entity.getRc_token();
        if (rc_token != null) {
            stmt.bindString(9, rc_token);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(10, amount);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.getLong(offset + 0), // mid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // worker_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mobile
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // worker_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // avatar
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // token
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // password
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // rc_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // rc_token
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // amount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setMid(cursor.getLong(offset + 0));
        entity.setWorker_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMobile(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWorker_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvatar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setToken(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPassword(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRc_id(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRc_token(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAmount(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setMid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getMid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
